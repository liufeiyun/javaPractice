package com.lfy.javaArrays;

/**
 * java多维数组专题
 * @author lfy
 * @since 2018/06/06
 * */
public class MultidimensionalArrays {

	/**
	 * 1、一维数组
	 *  数据类型[][] 数组名称;
		数据类型[] 数组名称[];
		数据类型数组名称[][];
	 * */
	
	
	/**
	 * 2、二维数组
		 *  数据类型[][] 数组名称;
			数据类型[] 数组名称[];
			数据类型数组名称[][];
		初始化：静态初始化(整体赋值)和动态初始化
		            静态初始化：
			            示例代码如下：
					int[][] m = {{1,2,3},{2,3,4}};
					在二维数组静态初始化时，也必须和数组的声明写在一起。数值书写时，使用两个大括号嵌套实现，在最里层的大括号内部书写数字的值。数值和数值之间使用逗号分隔，内部的大括号之间也使用逗号分隔。由该语法可以看出，内部的大括号其实就是一个一维数组的静态初始化，二维数组只是把多个一维数组的静态初始化组合起来。
					同理，三维数组的静态初始化语法格式如下：
					int[][][] b = {{{1,2,3},{1,2,3}},{{3,4,1},{2,3,4}}};
			动态初始化：
				    二维数组动态初始化的语法格式：
					数据类型[][] 数组名称= new 数据类型[第一维的长度][第二维的长度];
					数据类型[][] 数组名称;
					数组名称= new 数据类型[第一维的长度][第二维的长度];
					示例代码：
					byte[][] b = new byte[2][3];
					int m[][];
					m = new int[4][4];
					和一维数组一样，动态初始化可以和数组的声明分开，动态初始化只指定数组的长度，数组中每个元素的初始化是数组声明时数据类型的默认值。例如上面初始化了长度为2X3 的数组b，和4X4 的数组m。使用这种方法，初始化出的第二维的长度都是相同的，如果需要初始化第二维长度不一样的二维数组，则可以使用如下的格式：
					int n[][];
					n = new int[2][]; //只初始化第一维的长度
					//分别初始化后续的元素
					n[0] = new int[4];
					n[1] = new int[3];
					这里的语法就体现了数组的数组概念，在初始化第一维的长度时，其实就是把数组n 看成了一个一维数组，初始化其长度为2，则数组n 中包含的2个元素分别是n[0]和n[1]，而这两个元素分别是一个一维数组。后面使用一维数组动态初始化的语法分别初始化n[0]和n[1]。
	 * */
	String[][] MultiArray0;
	String[] MultiArray1[];
	String MultiArray2[][];
	
	static String[][] MultiArray3=new String[][]{
		{"0","","a"},
		{"1","","b"},
		{"2","","c"}
        };
	static int[][] m = {
		{1,2,3},
		{2,3,4}
	    };
	
	public static void main(String[] agrs){
		
		System.out.println(m[0][0]);
		System.out.println(m[0][1]);
		System.out.println(m[1][2]);
		
		System.out.println(MultiArray3[0][2]);
		System.out.println(MultiArray3[1][2]);
		System.out.println(MultiArray3[2][2]);
	}
}
